; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.220 

	TITLE	C:\AWD\Chapter2\sample.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_1BA@EOIJPMCG@?$AAT?$AAo?$AA?5?$AAe?$AAx?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	?OutputDebug@@YGXXZ				; OutputDebug
PUBLIC	??_C@_1EA@GJPHINLM@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAD?$AAe?$AAb?$AAu?$AAg?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	?HandledBP@@YGXXZ				; HandledBP
PUBLIC	??_C@_1EC@EOLEAILG@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAr?$AAe?$AAa?$AAk?$AAp?$AAo?$AAi?$AAn?$AAt@ ; `string'
PUBLIC	?HandledAV@@YGXXZ				; HandledAV
PUBLIC	??_C@_1EO@JIOFBGAB@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAV?$AAi?$AAo@ ; `string'
PUBLIC	?StackOverflow@@YGXXZ				; StackOverflow
PUBLIC	??_C@_1DK@BDNPHHD@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@GGBHDJIF@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAc?$AAd?$AAe?$AAc?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ ; `string'
PUBLIC	?StackFast@@YGXXZ				; StackFast
PUBLIC	??_C@_1DC@CIICOECP@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAF?$AAa?$AAs?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ ; `string'
PUBLIC	?StackStd@@YGXXZ				; StackStd
PUBLIC	??_C@_1DA@JEFBPAHE@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAs?$AAt?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ ; `string'
PUBLIC	?StackObj@@YGXXZ				; StackObj
PUBLIC	??_C@_1DA@KMKOBCIK@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ ; `string'
PUBLIC	?Stack64@@YGXXZ					; Stack64
PUBLIC	?Stack@@YGXXZ					; Stack
PUBLIC	??_C@_1DG@IEHGHLK@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ ; `string'
PUBLIC	?RaiseCPP@@YGXXZ				; RaiseCPP
PUBLIC	??_C@_1DE@OKGAPOEL@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	?RaiseBP@@YGXXZ					; RaiseBP
PUBLIC	??_C@_1EC@JOJIECH@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAb?$AAr?$AAe?$AAa?$AAk?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn@ ; `string'
PUBLIC	?RaiseAV@@YGXXZ					; RaiseAV
PUBLIC	??_C@_1EO@HFNIJJCM@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAv?$AAi?$AAo?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAe?$AAx?$AAc@ ; `string'
PUBLIC	?ApplicationHelp@@YGXXZ				; ApplicationHelp
PUBLIC	??_C@_1DC@MFOEPHGB@?$AAT?$AAo?$AA?5?$AAs?$AAh?$AAo?$AAw?$AA?5?$AAa?$AAp?$AAp?$AAl?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AAf?$AAo?$AA?$AA@ ; `string'
PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?options@@3PAUOPTIONS@@A			; options
;	COMDAT ??_C@_1BA@EOIJPMCG@?$AAT?$AAo?$AA?5?$AAe?$AAx?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@EOIJPMCG@?$AAT?$AAo?$AA?5?$AAe?$AAx?$AAi?$AAt?$AA?$AA@ DB 'T', 00H
	DB	'o', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'i', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@GJPHINLM@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAD?$AAe?$AAb?$AAu?$AAg?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@GJPHINLM@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAD?$AAe?$AAb?$AAu?$AAg?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'O', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'D', 00H, 'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, 'S', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@EOLEAILG@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAr?$AAe?$AAa?$AAk?$AAp?$AAo?$AAi?$AAn?$AAt@
CONST	SEGMENT
??_C@_1EC@EOLEAILG@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAr?$AAe?$AAa?$AAk?$AAp?$AAo?$AAi?$AAn?$AAt@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'b', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k'
	DB	00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@JIOFBGAB@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAV?$AAi?$AAo@
CONST	SEGMENT
??_C@_1EO@JIOFBGAB@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAV?$AAi?$AAo@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'A', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 's'
	DB	00H, 's', 00H, ' ', 00H, 'V', 00H, 'i', 00H, 'o', 00H, 'l', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BDNPHHD@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@BDNPHHD@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o'
	DB	00H, 'w', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@GGBHDJIF@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAc?$AAd?$AAe?$AAc?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@GGBHDJIF@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAc?$AAd?$AAe?$AAc?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'c', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'l', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@CIICOECP@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAF?$AAa?$AAs?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@CIICOECP@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAF?$AAa?$AAs?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@JEFBPAHE@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAs?$AAt?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@JEFBPAHE@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAs?$AAt?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@KMKOBCIK@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@KMKOBCIK@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'C', 00H, '+', 00H, '+', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@IEHGHLK@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@IEHGHLK@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@OKGAPOEL@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@OKGAPOEL@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'C', 00H, '+'
	DB	00H, '+', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'c', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@JOJIECH@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAb?$AAr?$AAe?$AAa?$AAk?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn@
CONST	SEGMENT
??_C@_1EC@JOJIECH@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAb?$AAr?$AAe?$AAa?$AAk?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'b', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'k', 00H, 'p', 00H, 'o', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'c', 00H, 'e'
	DB	00H, 'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@HFNIJJCM@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAv?$AAi?$AAo?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAe?$AAx?$AAc@
CONST	SEGMENT
??_C@_1EO@HFNIJJCM@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAv?$AAi?$AAo?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAe?$AAx?$AAc@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 'c'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, 'v', 00H
	DB	'i', 00H, 'o', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'c', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@MFOEPHGB@?$AAT?$AAo?$AA?5?$AAs?$AAh?$AAo?$AAw?$AA?5?$AAa?$AAp?$AAp?$AAl?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AAf?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@MFOEPHGB@?$AAT?$AAo?$AA?5?$AAs?$AAh?$AAo?$AAw?$AA?5?$AAa?$AAp?$AAp?$AAl?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AAf?$AAo?$AA?$AA@ DB 'T'
	DB	00H, 'o', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'w', 00H
	DB	' ', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'l', 00H, 'i', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
CONST	SEGMENT
___Fpz	DQ	0000000000000000H
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
	ORG $+4
?options@@3PAUOPTIONS@@A DW 031H			; options
	ORG $+2
	DD	FLAT:??_C@_1DC@MFOEPHGB@?$AAT?$AAo?$AA?5?$AAs?$AAh?$AAo?$AAw?$AA?5?$AAa?$AAp?$AAp?$AAl?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AAf?$AAo?$AA?$AA@
	DD	FLAT:?ApplicationHelp@@YGXXZ
	DW	032H
	ORG $+2
	DD	FLAT:??_C@_1EO@HFNIJJCM@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAv?$AAi?$AAo?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAe?$AAx?$AAc@
	DD	FLAT:?RaiseAV@@YGXXZ
	DW	033H
	ORG $+2
	DD	FLAT:??_C@_1EC@JOJIECH@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAb?$AAr?$AAe?$AAa?$AAk?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn@
	DD	FLAT:?RaiseBP@@YGXXZ
	DW	034H
	ORG $+2
	DD	FLAT:??_C@_1DE@OKGAPOEL@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	DD	FLAT:?RaiseCPP@@YGXXZ
	DW	035H
	ORG $+2
	DD	FLAT:??_C@_1DG@IEHGHLK@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
	DD	FLAT:?Stack@@YGXXZ
	DW	036H
	ORG $+2
	DD	FLAT:??_C@_1DG@IEHGHLK@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAn?$AAo?$AAr?$AAm?$AAa?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
	DD	FLAT:?Stack64@@YGXXZ
	DW	037H
	ORG $+2
	DD	FLAT:??_C@_1DA@KMKOBCIK@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
	DD	FLAT:?StackObj@@YGXXZ
	DW	038H
	ORG $+2
	DD	FLAT:??_C@_1DA@JEFBPAHE@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAs?$AAt?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
	DD	FLAT:?StackStd@@YGXXZ
	DW	039H
	ORG $+2
	DD	FLAT:??_C@_1DC@CIICOECP@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAF?$AAa?$AAs?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
	DD	FLAT:?StackFast@@YGXXZ
	DW	061H
	ORG $+2
	DD	FLAT:??_C@_1DE@GGBHDJIF@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAc?$AAd?$AAe?$AAc?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
	DD	FLAT:?StackFast@@YGXXZ
	DW	062H
	ORG $+2
	DD	FLAT:??_C@_1DK@BDNPHHD@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl?$AAo?$AAw?$AA?$AA@
	DD	FLAT:?StackOverflow@@YGXXZ
	DW	063H
	ORG $+2
	DD	FLAT:??_C@_1DE@GGBHDJIF@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAc?$AAd?$AAe?$AAc?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAc?$AAk?$AA?$AA@
	DD	FLAT:?StackFast@@YGXXZ
	DW	064H
	ORG $+2
	DD	FLAT:??_C@_1EO@JIOFBGAB@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAV?$AAi?$AAo@
	DD	FLAT:?HandledAV@@YGXXZ
	DW	065H
	ORG $+2
	DD	FLAT:??_C@_1EC@EOLEAILG@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAr?$AAe?$AAa?$AAk?$AAp?$AAo?$AAi?$AAn?$AAt@
	DD	FLAT:?HandledBP@@YGXXZ
	DW	066H
	ORG $+2
	DD	FLAT:??_C@_1EA@GJPHINLM@?$AAT?$AAo?$AA?5?$AAg?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAa?$AA?5?$AAO?$AAu?$AAt?$AAp?$AAu?$AAt?$AAD?$AAe?$AAb?$AAu?$AAg?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
	DD	FLAT:?OutputDebug@@YGXXZ
	DW	078H
	ORG $+2
	DD	FLAT:??_C@_1BA@EOIJPMCG@?$AAT?$AAo?$AA?5?$AAe?$AAx?$AAi?$AAt?$AA?$AA@
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
; Function compile flags: /Odtp
; File c:\awd\common\menu.h
CONST	ENDS
;	COMDAT ?ApplicationHelp@@YGXXZ
_TEXT	SEGMENT
?ApplicationHelp@@YGXXZ PROC				; ApplicationHelp, COMDAT

; 10   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 11   : 
; 12   : 
; 13   : };

  00005	5d		 pop	 ebp
  00006	c3		 ret	 0
?ApplicationHelp@@YGXXZ ENDP				; ApplicationHelp
_TEXT	ENDS
PUBLIC	?CalledFunction1@@YGHH@Z			; CalledFunction1
; Function compile flags: /Odtp
; File c:\awd\chapter2\sample.cpp
;	COMDAT ?CalledFunction1@@YGHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
?CalledFunction1@@YGHH@Z PROC				; CalledFunction1, COMDAT

; 23   : int CalledFunction1(int a){return 1;}

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	b8 01 00 00 00	 mov	 eax, 1
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?CalledFunction1@@YGHH@Z ENDP				; CalledFunction1
_TEXT	ENDS
PUBLIC	?CalledFunction2@@YGHHH@Z			; CalledFunction2
; Function compile flags: /Odtp
;	COMDAT ?CalledFunction2@@YGHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?CalledFunction2@@YGHHH@Z PROC				; CalledFunction2, COMDAT

; 24   : int CalledFunction2(int a,int b){return 2;}

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	b8 02 00 00 00	 mov	 eax, 2
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
?CalledFunction2@@YGHHH@Z ENDP				; CalledFunction2
_TEXT	ENDS
PUBLIC	?CalledFunction3@@YGHHHH@Z			; CalledFunction3
; Function compile flags: /Odtp
;	COMDAT ?CalledFunction3@@YGHHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?CalledFunction3@@YGHHHH@Z PROC				; CalledFunction3, COMDAT

; 25   : int CalledFunction3(int a,int b,int c){return 3;}

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	b8 03 00 00 00	 mov	 eax, 3
  0000a	5d		 pop	 ebp
  0000b	c2 0c 00	 ret	 12			; 0000000cH
?CalledFunction3@@YGHHHH@Z ENDP				; CalledFunction3
_TEXT	ENDS
PUBLIC	?CalledFunction4@@YGHHHHH@Z			; CalledFunction4
; Function compile flags: /Odtp
;	COMDAT ?CalledFunction4@@YGHHHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
?CalledFunction4@@YGHHHHH@Z PROC			; CalledFunction4, COMDAT

; 26   : int CalledFunction4(int a,int b,int c,int d){return 4;}

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	b8 04 00 00 00	 mov	 eax, 4
  0000a	5d		 pop	 ebp
  0000b	c2 10 00	 ret	 16			; 00000010H
?CalledFunction4@@YGHHHHH@Z ENDP			; CalledFunction4
_TEXT	ENDS
PUBLIC	?CalledFunction5@@YGHHHHHH@Z			; CalledFunction5
; Function compile flags: /Odtp
;	COMDAT ?CalledFunction5@@YGHHHHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
_e$ = 24						; size = 4
?CalledFunction5@@YGHHHHHH@Z PROC			; CalledFunction5, COMDAT

; 27   : int CalledFunction5(int a,int b,int c,int d,int e){return 5;}

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	b8 05 00 00 00	 mov	 eax, 5
  0000a	5d		 pop	 ebp
  0000b	c2 14 00	 ret	 20			; 00000014H
?CalledFunction5@@YGHHHHHH@Z ENDP			; CalledFunction5
_TEXT	ENDS
EXTRN	__imp__DebugBreak@0:PROC
; Function compile flags: /Odtp
;	COMDAT ?RaiseBP@@YGXXZ
_TEXT	SEGMENT
?RaiseBP@@YGXXZ PROC					; RaiseBP, COMDAT

; 43   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 44   :     DebugBreak();

  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DebugBreak@0

; 45   : }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?RaiseBP@@YGXXZ ENDP					; RaiseBP
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
;	COMDAT ??_R0H@8
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?RaiseCPP@@YGXXZ
_TEXT	SEGMENT
$T39612 = -4						; size = 4
?RaiseCPP@@YGXXZ PROC					; RaiseCPP, COMDAT

; 48   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 49   :     throw 0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T39612[ebp], 0
  0000d	68 00 00 00 00	 push	 OFFSET __TI1H
  00012	8d 45 fc	 lea	 eax, DWORD PTR $T39612[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@RaiseCPP:

; 50   : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?RaiseCPP@@YGXXZ ENDP					; RaiseCPP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?RaiseAV@@YGXXZ
_TEXT	SEGMENT
_invalidAddress$ = -4					; size = 4
?RaiseAV@@YGXXZ PROC					; RaiseAV, COMDAT

; 53   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 54   :     WCHAR* invalidAddress = 0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _invalidAddress$[ebp], 0

; 55   :     *invalidAddress = 0;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _invalidAddress$[ebp]
  00010	66 c7 00 00 00	 mov	 WORD PTR [eax], 0

; 56   : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?RaiseAV@@YGXXZ ENDP					; RaiseAV
_TEXT	ENDS
PUBLIC	?RaiseStackOverFlow@@YGX_J@Z			; RaiseStackOverFlow
; Function compile flags: /Odtp
;	COMDAT ?RaiseStackOverFlow@@YGX_J@Z
_TEXT	SEGMENT
_limit$ = 8						; size = 8
?RaiseStackOverFlow@@YGX_J@Z PROC			; RaiseStackOverFlow, COMDAT

; 59   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 60   :     if (limit > 10 ) return; 

  00005	83 7d 0c 00	 cmp	 DWORD PTR _limit$[ebp+4], 0
  00009	7c 0a		 jl	 SHORT $LN1@RaiseStack
  0000b	7f 06		 jg	 SHORT $LN4@RaiseStack
  0000d	83 7d 08 0a	 cmp	 DWORD PTR _limit$[ebp], 10 ; 0000000aH
  00011	76 02		 jbe	 SHORT $LN1@RaiseStack
$LN4@RaiseStack:
  00013	eb 0d		 jmp	 SHORT $LN2@RaiseStack
$LN1@RaiseStack:

; 61   :     RaiseStackOverFlow(limit);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _limit$[ebp+4]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _limit$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ?RaiseStackOverFlow@@YGX_J@Z ; RaiseStackOverFlow
$LN2@RaiseStack:

; 62   : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?RaiseStackOverFlow@@YGX_J@Z ENDP			; RaiseStackOverFlow
_TEXT	ENDS
PUBLIC	?RaiseStackOverFlowThread@@YAXPAX@Z		; RaiseStackOverFlowThread
EXTRN	__imp__Sleep@4:PROC
; Function compile flags: /Odtp
;	COMDAT ?RaiseStackOverFlowThread@@YAXPAX@Z
_TEXT	SEGMENT
_limit$ = -8						; size = 8
_threadParam$ = 8					; size = 4
?RaiseStackOverFlowThread@@YAXPAX@Z PROC		; RaiseStackOverFlowThread, COMDAT

; 65   : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8

; 66   :     Sleep(1000);

  00008	68 e8 03 00 00	 push	 1000			; 000003e8H
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 67   :     __int64 limit = (__int64)threadParam;

  00013	8b 45 08	 mov	 eax, DWORD PTR _threadParam$[ebp]
  00016	99		 cdq
  00017	89 45 f8	 mov	 DWORD PTR _limit$[ebp], eax
  0001a	89 55 fc	 mov	 DWORD PTR _limit$[ebp+4], edx

; 68   :     RaiseStackOverFlow(limit);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _limit$[ebp+4]
  00020	50		 push	 eax
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _limit$[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?RaiseStackOverFlow@@YGX_J@Z ; RaiseStackOverFlow

; 69   : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?RaiseStackOverFlowThread@@YAXPAX@Z ENDP		; RaiseStackOverFlowThread
_TEXT	ENDS
PUBLIC	??_C@_1BK@MIAKHAPC@?$AAF?$AA?5?$AA?$CI?$AA3?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?Fibonacci@KBTest@@SGII@Z			; KBTest::Fibonacci
EXTRN	__imp__wprintf:PROC
;	COMDAT ??_C@_1BK@MIAKHAPC@?$AAF?$AA?5?$AA?$CI?$AA3?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@MIAKHAPC@?$AAF?$AA?5?$AA?$CI?$AA3?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, ' ', 00H, '(', 00H, '3', 00H, '2', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, ' ', 00H, '%', 00H, 'd', 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtpy
CONST	ENDS
;	COMDAT ?Stack@@YGXXZ
_TEXT	SEGMENT
?Stack@@YGXXZ PROC					; Stack, COMDAT

; 142  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 143  :         wprintf (L"F (32) = %d\n",KBTest::Fibonacci(32));

  00005	6a 20		 push	 32			; 00000020H
  00007	e8 00 00 00 00	 call	 ?Fibonacci@KBTest@@SGII@Z ; KBTest::Fibonacci
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MIAKHAPC@?$AAF?$AA?5?$AA?$CI?$AA3?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wprintf
  00018	83 c4 08	 add	 esp, 8

; 144  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?Stack@@YGXXZ ENDP					; Stack
_TEXT	ENDS
EXTRN	__imp__IsDebuggerPresent@0:PROC
; Function compile flags: /Odtpy
;	COMDAT ?Fibonacci@KBTest@@SGII@Z
_TEXT	SEGMENT
tv64 = -4						; size = 4
_n$ = 8							; size = 4
?Fibonacci@KBTest@@SGII@Z PROC				; KBTest::Fibonacci, COMDAT

; 80   :     {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	56		 push	 esi

; 81   :         switch(n)

  00007	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0000a	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000d	83 7d fc 00	 cmp	 DWORD PTR tv64[ebp], 0
  00011	74 08		 je	 SHORT $LN4@Fibonacci
  00013	83 7d fc 01	 cmp	 DWORD PTR tv64[ebp], 1
  00017	74 16		 je	 SHORT $LN2@Fibonacci
  00019	eb 1b		 jmp	 SHORT $LN1@Fibonacci
$LN4@Fibonacci:

; 82   :         {
; 83   :             case 0: STOP_ON_DEBUGGER;return 0;

  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDebuggerPresent@0
  00021	85 c0		 test	 eax, eax
  00023	74 06		 je	 SHORT $LN3@Fibonacci
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DebugBreak@0
$LN3@Fibonacci:
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 23		 jmp	 SHORT $LN7@Fibonacci
$LN2@Fibonacci:

; 84   :             case 1: return 1;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	eb 1c		 jmp	 SHORT $LN7@Fibonacci
$LN1@Fibonacci:

; 85   :             default: return Fibonacci(n-1)+Fibonacci(n-2);

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00039	83 e9 01	 sub	 ecx, 1
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?Fibonacci@KBTest@@SGII@Z ; KBTest::Fibonacci
  00042	8b f0		 mov	 esi, eax
  00044	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  00047	83 ea 02	 sub	 edx, 2
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?Fibonacci@KBTest@@SGII@Z ; KBTest::Fibonacci
  00050	03 c6		 add	 eax, esi
$LN7@Fibonacci:

; 86   :         }
; 87   :     }

  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?Fibonacci@KBTest@@SGII@Z ENDP				; KBTest::Fibonacci
_TEXT	ENDS
PUBLIC	??_C@_03PMGGPEJJ@?$CFd?6?$AA@			; `string'
EXTRN	__imp__printf:PROC
EXTRN	?Function5@@YGHHHHHH@Z:PROC			; Function5
;	COMDAT ??_C@_03PMGGPEJJ@?$CFd?6?$AA@
CONST	SEGMENT
??_C@_03PMGGPEJJ@?$CFd?6?$AA@ DB '%d', 0aH, 00H		; `string'
; Function compile flags: /Odtpy
CONST	ENDS
;	COMDAT ?Stack64@@YGXXZ
_TEXT	SEGMENT
_ret$ = -4						; size = 4
?Stack64@@YGXXZ PROC					; Stack64, COMDAT

; 147  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 148  :         int ret = Function5(1,2,3,4,5);

  00006	6a 05		 push	 5
  00008	6a 04		 push	 4
  0000a	6a 03		 push	 3
  0000c	6a 02		 push	 2
  0000e	6a 01		 push	 1
  00010	e8 00 00 00 00	 call	 ?Function5@@YGHHHHHH@Z	; Function5
  00015	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 149  :         printf ("%d\n", ret);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0001b	50		 push	 eax
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_03PMGGPEJJ@?$CFd?6?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00027	83 c4 08	 add	 esp, 8

; 150  : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?Stack64@@YGXXZ ENDP					; Stack64
_TEXT	ENDS
PUBLIC	?Fibonacci_thiscall@KBTest@@QAEII@Z		; KBTest::Fibonacci_thiscall
PUBLIC	??_C@_07LALKJCJG@F?5?$CI32?$CJ?$DN?$AA@		; `string'
PUBLIC	??0KBTest@@QAE@XZ				; KBTest::KBTest
;	COMDAT ??_C@_07LALKJCJG@F?5?$CI32?$CJ?$DN?$AA@
CONST	SEGMENT
??_C@_07LALKJCJG@F?5?$CI32?$CJ?$DN?$AA@ DB 'F (32)=', 00H ; `string'
; Function compile flags: /Odtpy
CONST	ENDS
;	COMDAT ?StackObj@@YGXXZ
_TEXT	SEGMENT
_kbTest$ = -8						; size = 4
_f_32$ = -4						; size = 4
?StackObj@@YGXXZ PROC					; StackObj, COMDAT

; 153  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8

; 154  :         KBTest kbTest;

  00008	8d 4d f8	 lea	 ecx, DWORD PTR _kbTest$[ebp]
  0000b	e8 00 00 00 00	 call	 ??0KBTest@@QAE@XZ	; KBTest::KBTest

; 155  :         printf ("F (32)=");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_07LALKJCJG@F?5?$CI32?$CJ?$DN?$AA@
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0001b	83 c4 04	 add	 esp, 4

; 156  :         int f_32 = kbTest.Fibonacci_thiscall(32);

  0001e	6a 20		 push	 32			; 00000020H
  00020	8d 4d f8	 lea	 ecx, DWORD PTR _kbTest$[ebp]
  00023	e8 00 00 00 00	 call	 ?Fibonacci_thiscall@KBTest@@QAEII@Z ; KBTest::Fibonacci_thiscall
  00028	89 45 fc	 mov	 DWORD PTR _f_32$[ebp], eax

; 157  :         printf ("%d\n", f_32);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _f_32$[ebp]
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_03PMGGPEJJ@?$CFd?6?$AA@
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0003a	83 c4 08	 add	 esp, 8

; 158  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?StackObj@@YGXXZ ENDP					; StackObj
; Function compile flags: /Odtpy
_TEXT	ENDS
;	COMDAT ??0KBTest@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0KBTest@@QAE@XZ PROC					; KBTest::KBTest, COMDAT
; _this$ = ecx

; 76   :         {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 77   :         m_lastN = -1;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 78   :         }

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??0KBTest@@QAE@XZ ENDP					; KBTest::KBTest
; Function compile flags: /Odtpy
_TEXT	ENDS
;	COMDAT ?Fibonacci_thiscall@KBTest@@QAEII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_localN$ = -4						; size = 4
_n$ = 8							; size = 4
?Fibonacci_thiscall@KBTest@@QAEII@Z PROC		; KBTest::Fibonacci_thiscall, COMDAT
; _this$ = ecx

; 131  :     {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8
  00008	56		 push	 esi
  00009	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 132  :             m_lastN = n;

  0000c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 133  :             int localN = n + gGlobal.m_ref;

  00014	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  00017	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gGlobal@@3VGlobal@@A ; gGlobal
  0001d	89 55 fc	 mov	 DWORD PTR _localN$[ebp], edx

; 134  :             return Fibonacci_thiscall(localN-1)*Fibonacci_thiscall(localN-2);

  00020	8b 45 fc	 mov	 eax, DWORD PTR _localN$[ebp]
  00023	83 e8 01	 sub	 eax, 1
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Fibonacci_thiscall@KBTest@@QAEII@Z ; KBTest::Fibonacci_thiscall
  0002f	8b f0		 mov	 esi, eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _localN$[ebp]
  00034	83 e9 02	 sub	 ecx, 2
  00037	51		 push	 ecx
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?Fibonacci_thiscall@KBTest@@QAEII@Z ; KBTest::Fibonacci_thiscall
  00040	0f af c6	 imul	 eax, esi

; 135  :     }

  00043	5e		 pop	 esi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?Fibonacci_thiscall@KBTest@@QAEII@Z ENDP		; KBTest::Fibonacci_thiscall
_TEXT	ENDS
PUBLIC	?Fibonacci_stdcall@KBTest@@SGII@Z		; KBTest::Fibonacci_stdcall
; Function compile flags: /Odtpy
;	COMDAT ?StackStd@@YGXXZ
_TEXT	SEGMENT
_f_32$ = -4						; size = 4
?StackStd@@YGXXZ PROC					; StackStd, COMDAT

; 161  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 162  :         printf ("F (32)=");

  00006	68 00 00 00 00	 push	 OFFSET ??_C@_07LALKJCJG@F?5?$CI32?$CJ?$DN?$AA@
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00011	83 c4 04	 add	 esp, 4

; 163  :         int f_32 = KBTest::Fibonacci_stdcall(32);

  00014	6a 20		 push	 32			; 00000020H
  00016	e8 00 00 00 00	 call	 ?Fibonacci_stdcall@KBTest@@SGII@Z ; KBTest::Fibonacci_stdcall
  0001b	89 45 fc	 mov	 DWORD PTR _f_32$[ebp], eax

; 164  :         printf ("%d\n", f_32);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _f_32$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_03PMGGPEJJ@?$CFd?6?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0002d	83 c4 08	 add	 esp, 8

; 165  : } 

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?StackStd@@YGXXZ ENDP					; StackStd
; Function compile flags: /Odtpy
_TEXT	ENDS
;	COMDAT ?Fibonacci_stdcall@KBTest@@SGII@Z
_TEXT	SEGMENT
tv64 = -4						; size = 4
_n$ = 8							; size = 4
?Fibonacci_stdcall@KBTest@@SGII@Z PROC			; KBTest::Fibonacci_stdcall, COMDAT

; 121  :     {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	56		 push	 esi

; 122  :         switch(n)

  00007	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0000a	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000d	83 7d fc 00	 cmp	 DWORD PTR tv64[ebp], 0
  00011	74 08		 je	 SHORT $LN4@Fibonacci_
  00013	83 7d fc 01	 cmp	 DWORD PTR tv64[ebp], 1
  00017	74 16		 je	 SHORT $LN2@Fibonacci_
  00019	eb 1b		 jmp	 SHORT $LN1@Fibonacci_
$LN4@Fibonacci_:

; 123  :         {
; 124  :             case 0: STOP_ON_DEBUGGER;return 0;

  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDebuggerPresent@0
  00021	85 c0		 test	 eax, eax
  00023	74 06		 je	 SHORT $LN3@Fibonacci_
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DebugBreak@0
$LN3@Fibonacci_:
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 23		 jmp	 SHORT $LN7@Fibonacci_
$LN2@Fibonacci_:

; 125  :             case 1: return 1;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	eb 1c		 jmp	 SHORT $LN7@Fibonacci_
$LN1@Fibonacci_:

; 126  :             default: return Fibonacci_stdcall(n-1)+Fibonacci_stdcall(n-2);

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00039	83 e9 01	 sub	 ecx, 1
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?Fibonacci_stdcall@KBTest@@SGII@Z ; KBTest::Fibonacci_stdcall
  00042	8b f0		 mov	 esi, eax
  00044	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  00047	83 ea 02	 sub	 edx, 2
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?Fibonacci_stdcall@KBTest@@SGII@Z ; KBTest::Fibonacci_stdcall
  00050	03 c6		 add	 eax, esi
$LN7@Fibonacci_:

; 127  :         }
; 128  :     }

  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?Fibonacci_stdcall@KBTest@@SGII@Z ENDP			; KBTest::Fibonacci_stdcall
_TEXT	ENDS
PUBLIC	?Fibonacci_fastcall@KBTest@@SIII@Z		; KBTest::Fibonacci_fastcall
; Function compile flags: /Odtpy
;	COMDAT ?StackFast@@YGXXZ
_TEXT	SEGMENT
_f_32$ = -4						; size = 4
?StackFast@@YGXXZ PROC					; StackFast, COMDAT

; 168  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 169  : 
; 170  :         printf ("F (32)=");

  00006	68 00 00 00 00	 push	 OFFSET ??_C@_07LALKJCJG@F?5?$CI32?$CJ?$DN?$AA@
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00011	83 c4 04	 add	 esp, 4

; 171  :         int f_32 = KBTest::Fibonacci_fastcall(32);

  00014	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00019	e8 00 00 00 00	 call	 ?Fibonacci_fastcall@KBTest@@SIII@Z ; KBTest::Fibonacci_fastcall
  0001e	89 45 fc	 mov	 DWORD PTR _f_32$[ebp], eax

; 172  :         printf ("%d\n", f_32);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _f_32$[ebp]
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_03PMGGPEJJ@?$CFd?6?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00030	83 c4 08	 add	 esp, 8

; 173  : } 

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?StackFast@@YGXXZ ENDP					; StackFast
; Function compile flags: /Odtpy
_TEXT	ENDS
;	COMDAT ?Fibonacci_fastcall@KBTest@@SIII@Z
_TEXT	SEGMENT
tv64 = -8						; size = 4
_n$ = -4						; size = 4
?Fibonacci_fastcall@KBTest@@SIII@Z PROC			; KBTest::Fibonacci_fastcall, COMDAT
; _n$ = ecx

; 112  :     {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8
  00008	56		 push	 esi
  00009	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx

; 113  :         switch(n)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  00012	83 7d f8 00	 cmp	 DWORD PTR tv64[ebp], 0
  00016	74 08		 je	 SHORT $LN4@Fibonacci_@2
  00018	83 7d f8 01	 cmp	 DWORD PTR tv64[ebp], 1
  0001c	74 16		 je	 SHORT $LN2@Fibonacci_@2
  0001e	eb 1b		 jmp	 SHORT $LN1@Fibonacci_@2
$LN4@Fibonacci_@2:

; 114  :         {
; 115  :             case 0: STOP_ON_DEBUGGER;return 0;

  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDebuggerPresent@0
  00026	85 c0		 test	 eax, eax
  00028	74 06		 je	 SHORT $LN3@Fibonacci_@2
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DebugBreak@0
$LN3@Fibonacci_@2:
  00030	33 c0		 xor	 eax, eax
  00032	eb 21		 jmp	 SHORT $LN7@Fibonacci_@2
$LN2@Fibonacci_@2:

; 116  :             case 1: return 1;

  00034	b8 01 00 00 00	 mov	 eax, 1
  00039	eb 1a		 jmp	 SHORT $LN7@Fibonacci_@2
$LN1@Fibonacci_@2:

; 117  :             default: return Fibonacci_fastcall(n-1)+Fibonacci_fastcall(n-2);

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0003e	83 e9 01	 sub	 ecx, 1
  00041	e8 00 00 00 00	 call	 ?Fibonacci_fastcall@KBTest@@SIII@Z ; KBTest::Fibonacci_fastcall
  00046	8b f0		 mov	 esi, eax
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0004b	83 e9 02	 sub	 ecx, 2
  0004e	e8 00 00 00 00	 call	 ?Fibonacci_fastcall@KBTest@@SIII@Z ; KBTest::Fibonacci_fastcall
  00053	03 c6		 add	 eax, esi
$LN7@Fibonacci_@2:

; 118  :         }
; 119  :     }

  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?Fibonacci_fastcall@KBTest@@SIII@Z ENDP			; KBTest::Fibonacci_fastcall
_TEXT	ENDS
PUBLIC	?Fibonacci_cdecl@KBTest@@SAII@Z			; KBTest::Fibonacci_cdecl
PUBLIC	?StackCdecl@@YGXXZ				; StackCdecl
; Function compile flags: /Odtpy
;	COMDAT ?StackCdecl@@YGXXZ
_TEXT	SEGMENT
_f_32$ = -4						; size = 4
?StackCdecl@@YGXXZ PROC					; StackCdecl, COMDAT

; 175  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx

; 176  :         printf ("F (32)=");

  00006	68 00 00 00 00	 push	 OFFSET ??_C@_07LALKJCJG@F?5?$CI32?$CJ?$DN?$AA@
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00011	83 c4 04	 add	 esp, 4

; 177  :         int f_32 = KBTest::Fibonacci_cdecl(32);

  00014	6a 20		 push	 32			; 00000020H
  00016	e8 00 00 00 00	 call	 ?Fibonacci_cdecl@KBTest@@SAII@Z ; KBTest::Fibonacci_cdecl
  0001b	83 c4 04	 add	 esp, 4
  0001e	89 45 fc	 mov	 DWORD PTR _f_32$[ebp], eax

; 178  :         printf ("%d\n", f_32);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _f_32$[ebp]
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_03PMGGPEJJ@?$CFd?6?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00030	83 c4 08	 add	 esp, 8

; 179  : } 

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?StackCdecl@@YGXXZ ENDP					; StackCdecl
; Function compile flags: /Odtpy
_TEXT	ENDS
;	COMDAT ?Fibonacci_cdecl@KBTest@@SAII@Z
_TEXT	SEGMENT
tv64 = -4						; size = 4
_n$ = 8							; size = 4
?Fibonacci_cdecl@KBTest@@SAII@Z PROC			; KBTest::Fibonacci_cdecl, COMDAT

; 103  :     {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	56		 push	 esi

; 104  :         switch(n)

  00007	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0000a	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000d	83 7d fc 00	 cmp	 DWORD PTR tv64[ebp], 0
  00011	74 08		 je	 SHORT $LN4@Fibonacci_@3
  00013	83 7d fc 01	 cmp	 DWORD PTR tv64[ebp], 1
  00017	74 16		 je	 SHORT $LN2@Fibonacci_@3
  00019	eb 1b		 jmp	 SHORT $LN1@Fibonacci_@3
$LN4@Fibonacci_@3:

; 105  :         {
; 106  :             case 0: STOP_ON_DEBUGGER;return 0;

  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDebuggerPresent@0
  00021	85 c0		 test	 eax, eax
  00023	74 06		 je	 SHORT $LN3@Fibonacci_@3
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DebugBreak@0
$LN3@Fibonacci_@3:
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 29		 jmp	 SHORT $LN7@Fibonacci_@3
$LN2@Fibonacci_@3:

; 107  :             case 1: return 1;

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	eb 22		 jmp	 SHORT $LN7@Fibonacci_@3
$LN1@Fibonacci_@3:

; 108  :             default: return Fibonacci_cdecl(n-1)+Fibonacci_cdecl(n-2);

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  00039	83 e9 01	 sub	 ecx, 1
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?Fibonacci_cdecl@KBTest@@SAII@Z ; KBTest::Fibonacci_cdecl
  00042	83 c4 04	 add	 esp, 4
  00045	8b f0		 mov	 esi, eax
  00047	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  0004a	83 ea 02	 sub	 edx, 2
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?Fibonacci_cdecl@KBTest@@SAII@Z ; KBTest::Fibonacci_cdecl
  00053	83 c4 04	 add	 esp, 4
  00056	03 c6		 add	 eax, esi
$LN7@Fibonacci_@3:

; 109  :         }
; 110  :     }

  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?Fibonacci_cdecl@KBTest@@SAII@Z ENDP			; KBTest::Fibonacci_cdecl
_TEXT	ENDS
EXTRN	__imp___getch:PROC
EXTRN	__imp___beginthread:PROC
; Function compile flags: /Odtpy
;	COMDAT ?StackOverflow@@YGXXZ
_TEXT	SEGMENT
?StackOverflow@@YGXXZ PROC				; StackOverflow, COMDAT

; 181  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 182  :         _beginthread(&RaiseStackOverFlowThread, 0x1, NULL);

  00005	6a 00		 push	 0
  00007	6a 01		 push	 1
  00009	68 00 00 00 00	 push	 OFFSET ?RaiseStackOverFlowThread@@YAXPAX@Z ; RaiseStackOverFlowThread
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___beginthread
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 183  :         _beginthread(&RaiseStackOverFlowThread, 0x1, NULL);

  00017	6a 00		 push	 0
  00019	6a 01		 push	 1
  0001b	68 00 00 00 00	 push	 OFFSET ?RaiseStackOverFlowThread@@YAXPAX@Z ; RaiseStackOverFlowThread
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___beginthread
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  :         _beginthread(&RaiseStackOverFlowThread, 0x1, NULL);

  00029	6a 00		 push	 0
  0002b	6a 01		 push	 1
  0002d	68 00 00 00 00	 push	 OFFSET ?RaiseStackOverFlowThread@@YAXPAX@Z ; RaiseStackOverFlowThread
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___beginthread
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 185  :         _getch();

  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___getch

; 186  : } 

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?StackOverflow@@YGXXZ ENDP				; StackOverflow
_TEXT	ENDS
EXTRN	___security_cookie:DWORD
EXTRN	__except_handler4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?HandledAV@@YGXXZ DD 0fffffffeH
	DD	00H
	DD	0ffffffd8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN5@HandledAV
	DD	FLAT:$LN6@HandledAV
; Function compile flags: /Odtpy
xdata$x	ENDS
;	COMDAT ?HandledAV@@YGXXZ
_TEXT	SEGMENT
__$SEHRec$ = -24					; size = 24
?HandledAV@@YGXXZ PROC					; HandledAV, COMDAT

; 188  : {        __try

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	6a fe		 push	 -2			; fffffffeH
  00007	68 00 00 00 00	 push	 OFFSET __sehtable$?HandledAV@@YGXXZ
  0000c	68 00 00 00 00	 push	 OFFSET __except_handler4
  00011	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00017	50		 push	 eax
  00018	83 ec 08	 sub	 esp, 8
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00026	33 c5		 xor	 eax, ebp
  00028	50		 push	 eax
  00029	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 189  :             {
; 190  :             RaiseAV();

  0003c	e8 00 00 00 00	 call	 ?RaiseAV@@YGXXZ		; RaiseAV

; 191  :             }

  00041	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00048	eb 10		 jmp	 SHORT $LN4@HandledAV
$LN5@HandledAV:
$LN10@HandledAV:

; 192  :        __except(TRUE)

  0004a	b8 01 00 00 00	 mov	 eax, 1
$LN7@HandledAV:
$LN9@HandledAV:
  0004f	c3		 ret	 0
$LN6@HandledAV:
  00050	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 193  :         {
; 194  :         }

  00053	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN4@HandledAV:

; 195  : }

  0005a	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?HandledAV@@YGXXZ ENDP					; HandledAV
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?HandledBP@@YGXXZ DD 0fffffffeH
	DD	00H
	DD	0ffffffd8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN5@HandledBP
	DD	FLAT:$LN6@HandledBP
; Function compile flags: /Odtpy
xdata$x	ENDS
;	COMDAT ?HandledBP@@YGXXZ
_TEXT	SEGMENT
__$SEHRec$ = -24					; size = 24
?HandledBP@@YGXXZ PROC					; HandledBP, COMDAT

; 197  : {    

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	6a fe		 push	 -2			; fffffffeH
  00007	68 00 00 00 00	 push	 OFFSET __sehtable$?HandledBP@@YGXXZ
  0000c	68 00 00 00 00	 push	 OFFSET __except_handler4
  00011	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00017	50		 push	 eax
  00018	83 ec 08	 sub	 esp, 8
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00026	33 c5		 xor	 eax, ebp
  00028	50		 push	 eax
  00029	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 198  :         __try

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 199  :             {
; 200  :             RaiseBP();

  0003c	e8 00 00 00 00	 call	 ?RaiseBP@@YGXXZ		; RaiseBP

; 201  :             }

  00041	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00048	eb 10		 jmp	 SHORT $LN4@HandledBP
$LN5@HandledBP:
$LN10@HandledBP:

; 202  :        __except(TRUE)

  0004a	b8 01 00 00 00	 mov	 eax, 1
$LN7@HandledBP:
$LN9@HandledBP:
  0004f	c3		 ret	 0
$LN6@HandledBP:
  00050	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 203  :         {
; 204  :         }

  00053	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN4@HandledBP:

; 205  : 
; 206  : }

  0005a	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?HandledBP@@YGXXZ ENDP					; HandledBP
_TEXT	ENDS
PUBLIC	??_C@_1BE@JHKPICLH@?$AA?5?$AAr?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@LCFPGOGK@Application?5?$AA@		; `string'
EXTRN	__imp__OutputDebugStringW@4:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
;	COMDAT ??_C@_1BE@JHKPICLH@?$AA?5?$AAr?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@JHKPICLH@?$AA?5?$AAr?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?6?$AA?$AA@ DB ' '
	DB	00H, 'r', 00H, 'u', 00H, 'n', 00H, 'n', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LCFPGOGK@Application?5?$AA@
CONST	SEGMENT
??_C@_0N@LCFPGOGK@Application?5?$AA@ DB 'Application ', 00H ; `string'
; Function compile flags: /Odtpy
CONST	ENDS
;	COMDAT ?OutputDebug@@YGXXZ
_TEXT	SEGMENT
?OutputDebug@@YGXXZ PROC				; OutputDebug, COMDAT

; 208  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp

; 209  :         OutputDebugStringA("Application ");

  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LCFPGOGK@Application?5?$AA@
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4

; 210  :         OutputDebugStringW(L" running\n");

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@JHKPICLH@?$AA?5?$AAr?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?6?$AA?$AA@
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringW@4

; 211  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?OutputDebug@@YGXXZ ENDP				; OutputDebug
_TEXT	ENDS
PUBLIC	?Loop@AppInfo@@QAEXXZ				; AppInfo::Loop
PUBLIC	??0AppInfo@@QAE@PAUOPTIONS@@@Z			; AppInfo::AppInfo
PUBLIC	_wmain
; Function compile flags: /Odtpy
;	COMDAT _wmain
_TEXT	SEGMENT
_appInfo$ = -12						; size = 12
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 234  : {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 235  :     AppInfo appInfo=AppInfo(options);

  00008	68 00 00 00 00	 push	 OFFSET ?options@@3PAUOPTIONS@@A ; options
  0000d	8d 4d f4	 lea	 ecx, DWORD PTR _appInfo$[ebp]
  00010	e8 00 00 00 00	 call	 ??0AppInfo@@QAE@PAUOPTIONS@@@Z ; AppInfo::AppInfo

; 236  :     appInfo.Loop();

  00015	8d 4d f4	 lea	 ecx, DWORD PTR _appInfo$[ebp]
  00018	e8 00 00 00 00	 call	 ?Loop@AppInfo@@QAEXXZ	; AppInfo::Loop

; 237  :     return  0;

  0001d	33 c0		 xor	 eax, eax

; 238  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_wmain	ENDP
; Function compile flags: /Odtp
; File c:\awd\common\menu.h
_TEXT	ENDS
;	COMDAT ??0AppInfo@@QAE@PAUOPTIONS@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_options$ = 8						; size = 4
??0AppInfo@@QAE@PAUOPTIONS@@@Z PROC			; AppInfo::AppInfo, COMDAT
; _this$ = ecx

; 18   :     AppInfo(OPTIONS* options)

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   :     {
; 20   :             this->option = options;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _options$[ebp]
  0000f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 21   :     }

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0AppInfo@@QAE@PAUOPTIONS@@@Z ENDP			; AppInfo::AppInfo
_TEXT	ENDS
PUBLIC	??_C@_17JFFPPFLN@?$AA?6?$AA?$DO?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_1BC@HEIDFNIP@?$AA?5?$AA?5?$AA?$CF?$AAC?$AA?7?$AA?$CF?$AAS?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@GOMEKMIM@?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?6?$AA?$AA@ ; `string'
EXTRN	__imp___getwch:PROC
;	COMDAT ??_C@_17JFFPPFLN@?$AA?6?$AA?$DO?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_17JFFPPFLN@?$AA?6?$AA?$DO?$AA?5?$AA?$AA@ DB 0aH, 00H, '>', 00H, ' ', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@HEIDFNIP@?$AA?5?$AA?5?$AA?$CF?$AAC?$AA?7?$AA?$CF?$AAS?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@HEIDFNIP@?$AA?5?$AA?5?$AA?$CF?$AAC?$AA?7?$AA?$CF?$AAS?$AA?6?$AA?$AA@ DB ' '
	DB	00H, ' ', 00H, '%', 00H, 'C', 00H, 09H, 00H, '%', 00H, 'S', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@GOMEKMIM@?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@GOMEKMIM@?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?6?$AA?$AA@ DB 'P'
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ':', 00H, ' ', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?Loop@AppInfo@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_lastCommand$37774 = -12				; size = 4
_command$37773 = -8					; size = 2
_current$37763 = -4					; size = 4
?Loop@AppInfo@@QAEXXZ PROC				; AppInfo::Loop, COMDAT
; _this$ = ecx

; 29   :         {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H
  00008	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 30   :     wprintf(L"Press: \n");

  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@GOMEKMIM@?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?6?$AA?$AA@
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wprintf
  00016	83 c4 04	 add	 esp, 4

; 31   :         for (OPTIONS * current = option;;)

  00019	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001f	89 4d fc	 mov	 DWORD PTR _current$37763[ebp], ecx
$LN9@Loop:

; 32   :         {
; 33   :         wprintf(L"  %C\t%S\n",current->key,current->message);

  00022	8b 55 fc	 mov	 edx, DWORD PTR _current$37763[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _current$37763[ebp]
  0002c	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0002f	52		 push	 edx
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@HEIDFNIP@?$AA?5?$AA?5?$AA?$CF?$AAC?$AA?7?$AA?$CF?$AAS?$AA?6?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wprintf
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 34   :             if (current->handler == NULL) break;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _current$37763[ebp]
  00041	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00045	75 02		 jne	 SHORT $LN7@Loop
  00047	eb 0b		 jmp	 SHORT $LN6@Loop
$LN7@Loop:

; 35   :         current++;

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _current$37763[ebp]
  0004c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004f	89 4d fc	 mov	 DWORD PTR _current$37763[ebp], ecx

; 36   :         }

  00052	eb ce		 jmp	 SHORT $LN9@Loop
$LN6@Loop:

; 37   : 
; 38   :     while(true)

  00054	ba 01 00 00 00	 mov	 edx, 1
  00059	85 d2		 test	 edx, edx
  0005b	74 5a		 je	 SHORT $LN10@Loop

; 39   :     {
; 40   :             wprintf(L"\n> ");

  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_17JFFPPFLN@?$AA?6?$AA?$DO?$AA?5?$AA?$AA@
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wprintf
  00068	83 c4 04	 add	 esp, 4

; 41   :         WCHAR command = _getwch();

  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___getwch
  00071	66 89 45 f8	 mov	 WORD PTR _command$37773[ebp], ax

; 42   : 
; 43   :      OPTIONS * lastCommand = option;

  00075	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007b	89 4d f4	 mov	 DWORD PTR _lastCommand$37774[ebp], ecx
  0007e	eb 09		 jmp	 SHORT $LN4@Loop
$LN3@Loop:

; 44   :          for (;lastCommand->handler!=NULL && lastCommand->key != command;lastCommand++)

  00080	8b 55 f4	 mov	 edx, DWORD PTR _lastCommand$37774[ebp]
  00083	83 c2 0c	 add	 edx, 12			; 0000000cH
  00086	89 55 f4	 mov	 DWORD PTR _lastCommand$37774[ebp], edx
$LN4@Loop:
  00089	8b 45 f4	 mov	 eax, DWORD PTR _lastCommand$37774[ebp]
  0008c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00090	74 10		 je	 SHORT $LN2@Loop
  00092	8b 4d f4	 mov	 ecx, DWORD PTR _lastCommand$37774[ebp]
  00095	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00098	0f b7 45 f8	 movzx	 eax, WORD PTR _command$37773[ebp]
  0009c	3b d0		 cmp	 edx, eax
  0009e	74 02		 je	 SHORT $LN2@Loop

; 45   :          {
; 46   :          }

  000a0	eb de		 jmp	 SHORT $LN3@Loop
$LN2@Loop:

; 47   :          if (lastCommand->handler == NULL) break;

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR _lastCommand$37774[ebp]
  000a5	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000a9	75 02		 jne	 SHORT $LN1@Loop
  000ab	eb 0a		 jmp	 SHORT $LN10@Loop
$LN1@Loop:

; 48   :          (*lastCommand->handler)();

  000ad	8b 55 f4	 mov	 edx, DWORD PTR _lastCommand$37774[ebp]
  000b0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b3	ff d0		 call	 eax

; 49   : 
; 50   :         }

  000b5	eb 9d		 jmp	 SHORT $LN6@Loop
$LN10@Loop:

; 51   : 
; 52   :     }

  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
?Loop@AppInfo@@QAEXXZ ENDP				; AppInfo::Loop
_TEXT	ENDS
PUBLIC	??0Global@@QAE@XZ				; Global::Global
EXTRN	_atexit:PROC
; Function compile flags: /Odtp
; File c:\awd\chapter2\sample.cpp
;	COMDAT ??__EgGlobal@@YAXXZ
text$yc	SEGMENT
??__EgGlobal@@YAXXZ PROC				; `dynamic initializer for 'gGlobal'', COMDAT

; 40   : } gGlobal;

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGlobal@@3VGlobal@@A ; gGlobal
  0000a	e8 00 00 00 00	 call	 ??0Global@@QAE@XZ	; Global::Global
  0000f	68 00 00 00 00	 push	 OFFSET ??__FgGlobal@@YAXXZ ; `dynamic atexit destructor for 'gGlobal''
  00014	e8 00 00 00 00	 call	 _atexit
  00019	83 c4 04	 add	 esp, 4
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??__EgGlobal@@YAXXZ ENDP				; `dynamic initializer for 'gGlobal''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??0Global@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Global@@QAE@XZ PROC					; Global::Global, COMDAT
; _this$ = ecx

; 35   :     Global():m_ref(1){};

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??0Global@@QAE@XZ ENDP					; Global::Global
_TEXT	ENDS
PUBLIC	??1Global@@QAE@XZ				; Global::~Global
; Function compile flags: /Odtp
;	COMDAT ??__FgGlobal@@YAXXZ
text$yd	SEGMENT
??__FgGlobal@@YAXXZ PROC				; `dynamic atexit destructor for 'gGlobal'', COMDAT
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGlobal@@3VGlobal@@A ; gGlobal
  0000a	e8 00 00 00 00	 call	 ??1Global@@QAE@XZ	; Global::~Global
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??__FgGlobal@@YAXXZ ENDP				; `dynamic atexit destructor for 'gGlobal''
; Function compile flags: /Odtp
text$yd	ENDS
;	COMDAT ??1Global@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Global@@QAE@XZ PROC					; Global::~Global, COMDAT
; _this$ = ecx

; 37   :         {

  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   :             m_ref = 0;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 39   :         };    

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??1Global@@QAE@XZ ENDP					; Global::~Global
_TEXT	ENDS
PUBLIC	?gGlobal@@3VGlobal@@A				; gGlobal
_BSS	SEGMENT
?gGlobal@@3VGlobal@@A DD 01H DUP (?)			; gGlobal
_BSS	ENDS
CRT$XCU	SEGMENT
_gGlobal$initializer$ DD FLAT:??__EgGlobal@@YAXXZ
CRT$XCU	ENDS
END
